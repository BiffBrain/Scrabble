import os.path
from tkinter import *
from itertools import permutations
from itertools import combinations

from tkinter import messagebox
from random import random
from bisect import bisect

#Dictinory of valid letters and score
valid_letters={
'a':1,
'b':3,
'c':3,
'd':2,
'e':1,
'f':4,
'g':2,
'h':4,
'i':1,
'j':8,
'k':5,
'l':1,
'm':3,
'n':1,
'o':1,
'p':3,
'q':10,
'r':1,
's':1,
't':1,
'u':1,
'v':4,
'x':8,
'y':4,
'z':10
}
possible_letters=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
probability_list=[["A",9],["B",2],["C",2],["D",4],["E",12],["F",2],["G",3],["H",2],["I",9],["J",1],["K",1],["L",4],["M",2],["N",6],["O",8],["P",2],["Q",1],["R",6],["S",4],["T",6],["U",4],["V",2],["W",2],["X",1],["Y",2],["Z",1],["Bl",2] ]
player_tiles=[]
def choice():
    
    letter=weighted_choice(probability_list)
    probability_list[letter[1]][1]=probability_list[letter[1]][1]-1
    letter=letter[0]
    if letter=="Bl":
        return "_"
        
    return letter
    
def weighted_choice(choices):
    values, weights = zip(*choices)
    total = 0
    cum_weights = []
    for w in weights:
        total += w
        cum_weights.append(total)
    x = random() * total
    i = bisect(cum_weights, x)
    return values[i],i



def calculate_score(word):
    score=0
    for letter in word:
        if letter in valid_letters.keys():
            score=score+valid_letters[letter]
        else:
            return -1
    return score

def read_file(file_name):
    if os.path.exists(file_name):
        f = open(file_name, 'r')
        word_list = f.readlines()
        f.close()
        return word_list
    return -1

def file_parser(file_name):
    valid_word_list=[]
    word_list=read_file(file_name)
    if word_list==-1:
        return -1
    for word in word_list:
        word=word.strip()
        score = calculate_score(word)
        if score !=-1:
            word_score_tuple=(word,score)
            valid_word_list.append(word_score_tuple)
    return valid_word_list
         

def get_possible_strings(word,word_list):
    combs = [''.join(l) for i in range(len(word)) for l in combinations(word.lower(), i+1)]
    perms=[]
    for w in combs:
        if '-' in w:
            for l in possible_letters:
                new_w=w
                new_w.replace('-','l')
                perms.extend( [''.join(p) for p in permutations(w.lower())]) 
        else:
            perms.extend( [''.join(p) for p in permutations(w.lower())])  

    print(list(set(word_list).intersection(perms)))
class Scrabble_Box:
  def __init__(self, value, word_multiplier_val,letter_multiplier_val):
    self.value = value
    self.word_multiplier_val = word_multiplier_val
    self.letter_multiplier_val = letter_multiplier_val
    self.id=0
    
    
    
class Scrabble_Board:
    def __init__(self, root,row_size, col_size,word_score,letter_score,word_list):
        self.Board = [[Scrabble_Box(-1,1,1) for i in range(row_size)] for j in range(col_size)]  

        for score in word_score:
            self.Board[score[0]][score[1]].word_multiplier_val=score[2]
        self.final_words=[]
        for w in word_list:
            self.final_words.extend(w)
            
        for score in letter_score:
            self.Board[score[0]][score[1]].letter_multiplier_val=score[2]
        self.root=root
        self.canvas=Canvas(self.root,bg="gray")    
        self.root.title("Welcome to Scrabble")
        self.Create_UI(row_size,col_size)
        self.word_list=word_list
    def check_is_valid_pos(self,word,word_list,direction,pos,tiles):
        i=pos[0]-1
        j=pos[1]-1
        if self.Board[7][7].value==-1 and (i!=7 or j!=7):
            print("Please enter at center (8,8)")
            return False
        return True
    def possible_word(self,word,word_list,direction,pos,tiles):
        i=pos[0]-1
        j=pos[1]-1
        if i>15 or j>15:
            print("i and j index are out of range please re enter")
        elif i<0 or j<0:
            print("less than 1 index not possible")
        curr_count=0    
        dash=0
        
        for l in tiles:
            if l=="_":
                dash=dash+1
        for letter in word.lower():
            
            if self.Board[i][j].value!=letter and self.Board[i][j].value!=-1:#board was empty 
                print("Entering this word is not possible at said position")
                return False
            elif self.Board[i][j].value!=letter:
                curr_count=curr_count+1# word is unique
            if letter not in tiles.lower():
                if self.Board[i][j].value!=letter:
                    if dash>0:
                        dash=dash-1
                    else:
                        print("You don't have tiles to complete the word")
                        return False
            if direction==1:
                i=i+1
            else:
                j=j+1
        
        if curr_count==0:
            print("Word already exists Enter a valid word")
            return False
        elif curr_count==len(word) and (pos[0]!=8 or pos[1]!=8):
            print("Please enter a word connected to previously entered tile")
            return False
        return True 

    def remove_tile(self,word,word_list,direction,pos,tiles):
        i=pos[0]-1
        j=pos[1]-1
        
        curr_count=0    
        dash=0
        for l in tiles:
            if l=="_":
                dash=dash+1
        for letter in word.lower():
            
            if self.Board[i][j].value!=letter:
                if letter.upper() in player_tiles:
                    player_tiles.remove(letter.upper())    
                else:
                    player_tiles.remove('_')
                

            if direction==1:
                i=i+1
            else:
                j=j+1
        if curr_count==0:
            print("Word already exists Enter a valid word")
            return False
        return True     
    def check_word(self):
        word=self.word_box.get()
        get_possible_strings(''.join(player_tiles),self.final_words)    

        if  word not in self.final_words:
            print("\nPlease enter a valid Word")
            return 0
        pos=tuple([eval(x) for x in self.pos_box.get().split(',')])
        direction=int(self.direction_box.get())
        if self.check_is_valid_pos(word,self.word_list,direction,pos,''.join(player_tiles))==False:
            return 0
        if self.possible_word(word,self.word_list,direction,pos,''.join(player_tiles))==False:
            return 0
        self.remove_tile(word,self.word_list,direction,pos,''.join(player_tiles))
        print('Score for the word is',self.word_input(word,self.word_list,direction,pos))
        
        for i in range(0,7-len(player_tiles)):
            player_tiles.append(choice())
        print("Player tiles are: ",end='')
        for val in player_tiles:
            print(val,end=',')
        print("")
    

    def Create_UI(self,row_size, col_size):
        canvas=Canvas(self.root,bg="gray")
        #lbl = Label(canvas,text = "Please enter a Valid Word",bg="gray")
        #lbl.place(x = 0,y =10)
        #lbl.pack()
        lbl=Text(canvas, bg="gray",height=0, width=200,relief=FLAT)
        lbl.pack(padx=5,pady=5,anchor='w')
        lbl.insert(INSERT, "Please Enter a Valid Word:")
        lbl.insert(INSERT," "*22+ "x,y")
        lbl.insert(END," "*8+ "L-R/T-B(1,2)")


        self.word_box=Entry(canvas)
        self.word_box.place(x=220,y=5,width=150)
        self.pos_box=Entry(canvas)
        self.pos_box.place(x=420,y=5,width=40)
        self.direction_box=Entry(canvas)
        self.direction_box.place(x=600,y=5,width=40)
        
        self.insert = Button(canvas, text = "insert", command = self.check_word,width=10)
        self.insert.place(x = 660,y = 5)      


        for i in range(0,7-len(player_tiles)):
            player_tiles.append(choice())
        print("Player tiles are: ",end='')
        for val in player_tiles:
            print(val,end=',')
        print("")
        for i in range(row_size):
            for j in range(col_size):
                if self.Board[i][j].word_multiplier_val==3:
                    
                    canvas.create_rectangle(40+i*45, 30+j*45, 90+i*45, 80+j*45, outline="darkblue", fill="orange", tags="orange")

                    self.Board[i][j].id=canvas.create_text((40+i*45+22,30+j*45+19),font=('Purisa',7,"bold"), text="Triple\nWord\nMultiplier")
    
                elif self.Board[i][j].word_multiplier_val==2: 
                    canvas.create_rectangle(40+i*45, 30+j*45, 90+i*45, 80+j*45, outline="darkblue", fill="purple", tags="purple")
                    if i==7 and j==7:
                        self.Board[i][j].id=canvas.create_text((40+i*45+22,30+j*45+32),font=('Purisa',48,"bold"), text="*")
                    else:
                        self.Board[i][j].id=canvas.create_text((40+i*45+22,30+j*45+19),font=('Purisa',7,"bold"), text="Double\nWord\nMultiplier")
    
                elif self.Board[i][j].letter_multiplier_val==2: 
                    canvas.create_rectangle(40+i*45, 30+j*45, 90+i*45, 80+j*45, outline="darkblue", fill="green", tags="green")
                    self.Board[i][j].id=canvas.create_text((40+i*45+22,30+j*45+19),font=('Purisa',7,"bold"), text="Triple\nLetter\nMultiplier")
    
                elif self.Board[i][j].letter_multiplier_val==3: 
                    canvas.create_rectangle(40+i*45, 30+j*45, 90+i*45, 80+j*45, outline="darkblue", fill="white", tags="white")
                    self.Board[i][j].id=canvas.create_text((40+i*45+22,30+j*45+19),font=('Purisa',7,"bold"), text="Double\nLetter\nMultiplier")
    
                else:
                    
                    canvas.create_rectangle(40+i*45, 30+j*45, 90+i*45, 80+j*45, outline="darkblue", fill="lightblue", tags="lightblue")
                    #self.Board[i][j].id=canvas.create_text((40+i*45+22,30+j*45+32),font=('Purisa',48,"bold"), "")
        self.canvas=canvas
        self.canvas.pack(fill='both', expand=1)
    def word_score(self,word,word_list,direction,pos):
        i=pos[0]-1
        j=pos[1]-1
        
        current_score=0
        word_multiplier=1
        dict
        for letter in word:
            current_score=current_score+valid_letters[letter]*self.Board[i][j].letter_multiplier_val
            word_multiplier=word_multiplier*self.Board[i][j].word_multiplier_val

            if direction==1:
                i=i+1
            else:
                j=j+1
        return current_score*word_multiplier


    def word_input(self,word,word_list,direction,pos):
        i=pos[0]-1
        j=pos[1]-1
        current_score=0
        word_multiplier=1
        word=word.lower()
        for letter in word:
            current_score=current_score+valid_letters[letter]*self.Board[i][j].letter_multiplier_val
            word_multiplier=word_multiplier*self.Board[i][j].word_multiplier_val

            self.Board[i][j].value=letter
            if self.Board[i][j].id==0:
                self.Board[i][j].id=self.canvas.create_text((40+i*45+22,30+j*45+24),font=('Purisa',28,"bold"), text=self.Board[i][j].value)
            else:   
                self.canvas.itemconfig(self.Board[i][j].id,font=('Purisa',28,"bold"),text=self.Board[i][j].value)
            if direction==1:
                i=i+1
            else:
                j=j+1
        self.canvas.pack(fill=BOTH, expand=1)
        
        return current_score*word_multiplier


def main():
    file_name="words.txt"
    word_list=file_parser(file_name)
    if word_list==-1:
        print(file_name,"Does not exist")
        return 0

    print("No of Valid Words for scrabble are:",len(word_list))
    word_score=[(0,0,3),(0,7,3),(0,14,3),(1,1,2),(1,13,2),(2,2,2),(2,12,2),(3,3,2),(3,11,2),(4,4,2),(4,10,2),(7,7,2),(10,4,2),(10,10,2),(11,11,2),(11,3,2),(12,12,2),(12,2,2),(13,13,2),(13,1,2),(7,0,3),(7,14,3),(14,0,3),(14,7,3),(14,14,3)  ]
    letter_score=[(0,3,2),(0,11,2),(1,5,3),(1,9,3),(2,6,2),(2,8,2),(3,0,2),(3,7,2),(3,14,2), (5,1,3),(5,5,3),(5,9,3),(5,13,3),(6,2,2),(6,6,2),(6,8,2),(6,12,2),(7,3,2),(7,11,2),(8,2,2),(8,6,2),(8,8,2),(8,12,2),(9,1,3),(9,5,3),(9,9,3),(9,13,3),(11,0,2),(11,7,2),(11,14,2),(12,6,2),(12,8,2),(13,5,3),(13,9,3),(14,3,2),(14,11,2)]
    root = Tk()
    root.geometry("750x750")    
    Board=Scrabble_Board(root,15,15,word_score,letter_score,word_list)        
    root.mainloop()







if __name__ == "__main__":
    main()
